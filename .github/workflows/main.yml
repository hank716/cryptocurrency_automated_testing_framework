name: Crypto QA Framework CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - api
          - web
          - performance

jobs:
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pylint black || true
          pip install -r requirements.txt || true

      - name: Run flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true

      - name: Run pylint
        run: |
          pylint --disable=C0111,C0103,C0303,W0621,R0913,R0914 api_tests web_tests performance_tests utils || true

      - name: Check formatting with black
        run: |
          black --check . || true

  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    needs: code-quality
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'api' || github.event.inputs.test_type == '' }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true

      - name: Run API tests
        run: |
          mkdir -p reports
          pytest api_tests/ -v --html=reports/api_test_report.html || true

      - name: Upload API test report
        uses: actions/upload-artifact@v3.1.3
        with:
          name: api-test-report
          path: reports/api_test_report.html
        if: always()

  web-tests:
    name: Web UI Tests
    runs-on: ubuntu-latest
    needs: code-quality
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'web' || github.event.inputs.test_type == '' }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true

      - name: Install Chrome
        run: |
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add - || true
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
        continue-on-error: true

      - name: Run Web UI tests
        run: |
          mkdir -p reports/screenshots
          pytest web_tests/ -v --html=reports/web_test_report.html || true

      - name: Upload Web UI test report
        uses: actions/upload-artifact@v3.1.3
        with:
          name: web-test-report
          path: |
            reports/web_test_report.html
            reports/screenshots/
        if: always()

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: code-quality
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'performance' || github.event.inputs.test_type == '' }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true

      - name: Run API load tests
        run: |
          mkdir -p performance_tests/reports
          cd performance_tests
          python -m locust -f locustfiles/api_load_test.py --headless -u 10 -r 1 -t 1m --host https://sandbox-api.coinmarketcap.com || true

      - name: Run stress tests
        run: |
          cd performance_tests
          python -m locust -f locustfiles/stress_test.py --headless -u 20 -r 5 -t 30s --host https://sandbox-api.coinmarketcap.com || true

      - name: Upload performance test reports
        uses: actions/upload-artifact@v3.1.3
        with:
          name: performance-test-reports
          path: performance_tests/reports/
        if: always()

  notify:
    name: Notify Test Results
    runs-on: ubuntu-latest
    needs: [api-tests, web-tests, performance-tests]
    if: always()
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Download API test artifacts
        uses: actions/download-artifact@v3.1.4
        with:
          name: api-test-report
          path: reports/api
        continue-on-error: true

      - name: Download Web test artifacts
        uses: actions/download-artifact@v3.1.4
        with:
          name: web-test-report
          path: reports/web
        continue-on-error: true

      - name: Download Performance test artifacts
        uses: actions/download-artifact@v3.1.4
        with:
          name: performance-test-reports
          path: reports/performance
        continue-on-error: true

      - name: Send notification
        run: |
          chmod +x ./utils/notify.sh
          ./utils/notify.sh || true
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          EMAIL_RECIPIENT: ${{ secrets.EMAIL_RECIPIENT }}
        continue-on-error: true
