name: Crypto QA Framework CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - api
          - web
          - performance

jobs:
  # ----------------------------------------------------------------------
  # 1. Code Quality
  # ----------------------------------------------------------------------
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # 使用 setup-miniconda 建立並啟用 conda 環境，請注意這裡使用 activate-environment 與 create-env: true
      - name: Set up Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: "3.10"
          activate-environment: "crypto_testing_env"
          create-env: true
          auto-activate-base: false
          auto-update-conda: false
          remove-profiles: true
          conda-solver: libmamba
          clean-patched-environment-file: true
          run-post: true

      - name: Install code-quality dependencies
        shell: bash -l {0}
        run: |
          conda run -n crypto_testing_env python -m pip install --upgrade pip
          conda run -n crypto_testing_env pip install flake8 pylint black

      - name: Run flake8
        shell: bash -l {0}
        run: |
          conda run -n crypto_testing_env flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true

      - name: Run pylint
        shell: bash -l {0}
        run: |
          conda run -n crypto_testing_env pylint --disable=C0111,C0103,C0303,W0621,R0913,R0914 api_tests web_tests performance_tests utils || true

      - name: Check formatting with black
        shell: bash -l {0}
        run: |
          conda run -n crypto_testing_env black --check . || true

  # ----------------------------------------------------------------------
  # 2. API Tests
  # ----------------------------------------------------------------------
  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    needs: code-quality
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'api' || github.event.inputs.test_type == '' }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: "3.10"
          activate-environment: "crypto_testing_env"
          create-env: true
          auto-activate-base: false

      - name: Install dependencies
        shell: bash -l {0}
        run: |
          conda run -n crypto_testing_env python -m pip install --upgrade pip
          conda run -n crypto_testing_env pip install -r requirements.txt || true

      - name: Run API tests
        shell: bash -l {0}
        run: |
          mkdir -p reports/api
          conda run -n crypto_testing_env pytest api_tests/ -v --html=reports/api/api_test_report.html || true

      - name: Upload API test report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: api-test-report
          path: reports/api/api_test_report.html

  # ----------------------------------------------------------------------
  # 3. Web UI Tests
  # ----------------------------------------------------------------------
  web-tests:
    name: Web UI Tests
    runs-on: ubuntu-latest
    needs: code-quality
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'web' || github.event.inputs.test_type == '' }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: "3.10"
          activate-environment: "crypto_testing_env"
          create-env: true
          auto-activate-base: false

      - name: Install Chrome
        run: |
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add - || true
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

      - name: Install Python dependencies
        shell: bash -l {0}
        run: |
          conda run -n crypto_testing_env python -m pip install --upgrade pip
          conda run -n crypto_testing_env pip install -r requirements.txt || true

      - name: Run Web UI tests
        shell: bash -l {0}
        run: |
          mkdir -p reports/web/screenshots
          conda run -n crypto_testing_env pytest web_tests/ -v --html=reports/web/web_test_report.html || true

      - name: Upload Web UI test report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: web-test-report
          path: reports/web/

  # ----------------------------------------------------------------------
  # 4. Performance Tests
  # ----------------------------------------------------------------------
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: code-quality
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'performance' || github.event.inputs.test_type == '' }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: "3.10"
          activate-environment: "crypto_testing_env"
          create-env: true
          auto-activate-base: false

      - name: Install dependencies
        shell: bash -l {0}
        run: |
          conda run -n crypto_testing_env python -m pip install --upgrade pip
          conda run -n crypto_testing_env pip install -r requirements.txt || true

      - name: Run performance tests with Locust
        shell: bash -l {0}
        run: |
          mkdir -p reports/performance
          conda run -n crypto_testing_env locust -f performance_tests/test_locustfile.py --headless -u 10 -r 2 -t 1m --csv=reports/performance/perf_result || true

      - name: Upload Performance Test Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-report
          path: reports/performance/

  # ----------------------------------------------------------------------
  # 5. Notify Test Results
  # ----------------------------------------------------------------------
  notify:
    name: Notify Test Results
    runs-on: ubuntu-latest
    needs: [api-tests, web-tests]
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies (jq & mailutils)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq mailutils
      - name: Download API test artifacts
        uses: actions/download-artifact@v4
        with:
          name: api-test-report
          path: reports/api
        continue-on-error: true
      - name: Download Web test artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-test-report
          path: reports/web
        continue-on-error: true
      - name: Send notification
        run: |
          chmod +x ./utils/notify.sh
          ./utils/notify.sh || true
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          EMAIL_RECIPIENT: ${{ secrets.EMAIL_RECIPIENT }}
        continue-on-error: true
